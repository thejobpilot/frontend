/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AssignInterviewDTO
 */
export interface AssignInterviewDTO {
    /**
     * 
     * @type {number}
     * @memberof AssignInterviewDTO
     */
    'interviewId': number;
}
/**
 * 
 * @export
 * @interface GetManyInterviewResponseDto
 */
export interface GetManyInterviewResponseDto {
    /**
     * 
     * @type {Array<Interview>}
     * @memberof GetManyInterviewResponseDto
     */
    'data': Array<Interview>;
    /**
     * 
     * @type {number}
     * @memberof GetManyInterviewResponseDto
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyInterviewResponseDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyInterviewResponseDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyInterviewResponseDto
     */
    'pageCount': number;
}
/**
 * 
 * @export
 * @interface GetManyPositionResponseDto
 */
export interface GetManyPositionResponseDto {
    /**
     * 
     * @type {Array<Position>}
     * @memberof GetManyPositionResponseDto
     */
    'data': Array<Position>;
    /**
     * 
     * @type {number}
     * @memberof GetManyPositionResponseDto
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyPositionResponseDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyPositionResponseDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyPositionResponseDto
     */
    'pageCount': number;
}
/**
 * 
 * @export
 * @interface GetManyQuestionResponseDto
 */
export interface GetManyQuestionResponseDto {
    /**
     * 
     * @type {Array<Question>}
     * @memberof GetManyQuestionResponseDto
     */
    'data': Array<Question>;
    /**
     * 
     * @type {number}
     * @memberof GetManyQuestionResponseDto
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyQuestionResponseDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyQuestionResponseDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyQuestionResponseDto
     */
    'pageCount': number;
}
/**
 * 
 * @export
 * @interface GetManyUserResponseDto
 */
export interface GetManyUserResponseDto {
    /**
     * 
     * @type {Array<User>}
     * @memberof GetManyUserResponseDto
     */
    'data': Array<User>;
    /**
     * 
     * @type {number}
     * @memberof GetManyUserResponseDto
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyUserResponseDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyUserResponseDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyUserResponseDto
     */
    'pageCount': number;
}
/**
 * 
 * @export
 * @interface Interview
 */
export interface Interview {
    /**
     * 
     * @type {number}
     * @memberof Interview
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Interview
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Interview
     */
    'prepTime': number;
    /**
     * 
     * @type {number}
     * @memberof Interview
     */
    'positionId'?: number;
    /**
     * 
     * @type {Position}
     * @memberof Interview
     */
    'position'?: Position;
    /**
     * 
     * @type {Array<Question>}
     * @memberof Interview
     */
    'questions'?: Array<Question>;
    /**
     * 
     * @type {Array<User>}
     * @memberof Interview
     */
    'applicants'?: Array<User>;
}
/**
 * 
 * @export
 * @interface Position
 */
export interface Position {
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Position
     */
    'name': string;
    /**
     * 
     * @type {Array<Interview>}
     * @memberof Position
     */
    'interviews'?: Array<Interview>;
    /**
     * 
     * @type {string}
     * @memberof Position
     */
    'creatorEmail'?: string;
    /**
     * 
     * @type {User}
     * @memberof Position
     */
    'creator'?: User;
}
/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'interviewId'?: number;
    /**
     * 
     * @type {Interview}
     * @memberof Question
     */
    'interview'?: Interview;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'prompt': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'graduationDate': string;
    /**
     * 
     * @type {Array<Interview>}
     * @memberof User
     */
    'interviews'?: Array<Interview>;
    /**
     * 
     * @type {Array<Position>}
     * @memberof User
     */
    'positions'?: Array<Position>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'fullName': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'gpa': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'resumeLink': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userType': UserUserTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'retakes': boolean;
}

export const UserUserTypeEnum = {
    Applicant: 'applicant',
    Recruiter: 'recruiter',
    Employer: 'employer'
} as const;

export type UserUserTypeEnum = typeof UserUserTypeEnum[keyof typeof UserUserTypeEnum];


/**
 * InterviewApi - axios parameter creator
 * @export
 */
export const InterviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a single Interview
         * @param {number} positionId 
         * @param {Interview} interview 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneBaseInterviewsControllerInterview: async (positionId: number, interview: Interview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('createOneBaseInterviewsControllerInterview', 'positionId', positionId)
            // verify required parameter 'interview' is not null or undefined
            assertParamExists('createOneBaseInterviewsControllerInterview', 'interview', interview)
            const localVarPath = `/position/{positionId}/interview`
                .replace(`{${"positionId"}}`, encodeURIComponent(String(positionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(interview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a single Interview
         * @param {number} id 
         * @param {number} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneBaseInterviewsControllerInterview: async (id: number, positionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOneBaseInterviewsControllerInterview', 'id', id)
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('deleteOneBaseInterviewsControllerInterview', 'positionId', positionId)
            const localVarPath = `/position/{positionId}/interview/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"positionId"}}`, encodeURIComponent(String(positionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single Interview
         * @param {number} id 
         * @param {number} positionId 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseInterviewsControllerInterview: async (id: number, positionId: number, fields?: Array<string>, join?: Array<string>, cache?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneBaseInterviewsControllerInterview', 'id', id)
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('getOneBaseInterviewsControllerInterview', 'positionId', positionId)
            const localVarPath = `/position/{positionId}/interview/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"positionId"}}`, encodeURIComponent(String(positionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a single Interview
         * @param {number} id 
         * @param {number} positionId 
         * @param {Interview} interview 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseInterviewsControllerInterview: async (id: number, positionId: number, interview: Interview, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOneBaseInterviewsControllerInterview', 'id', id)
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('updateOneBaseInterviewsControllerInterview', 'positionId', positionId)
            // verify required parameter 'interview' is not null or undefined
            assertParamExists('updateOneBaseInterviewsControllerInterview', 'interview', interview)
            const localVarPath = `/position/{positionId}/interview/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"positionId"}}`, encodeURIComponent(String(positionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(interview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InterviewApi - functional programming interface
 * @export
 */
export const InterviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InterviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a single Interview
         * @param {number} positionId 
         * @param {Interview} interview 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneBaseInterviewsControllerInterview(positionId: number, interview: Interview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Interview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneBaseInterviewsControllerInterview(positionId, interview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a single Interview
         * @param {number} id 
         * @param {number} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneBaseInterviewsControllerInterview(id: number, positionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneBaseInterviewsControllerInterview(id, positionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a single Interview
         * @param {number} id 
         * @param {number} positionId 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneBaseInterviewsControllerInterview(id: number, positionId: number, fields?: Array<string>, join?: Array<string>, cache?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Interview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseInterviewsControllerInterview(id, positionId, fields, join, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a single Interview
         * @param {number} id 
         * @param {number} positionId 
         * @param {Interview} interview 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOneBaseInterviewsControllerInterview(id: number, positionId: number, interview: Interview, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Interview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBaseInterviewsControllerInterview(id, positionId, interview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InterviewApi - factory interface
 * @export
 */
export const InterviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InterviewApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a single Interview
         * @param {number} positionId 
         * @param {Interview} interview 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneBaseInterviewsControllerInterview(positionId: number, interview: Interview, options?: any): AxiosPromise<Interview> {
            return localVarFp.createOneBaseInterviewsControllerInterview(positionId, interview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a single Interview
         * @param {number} id 
         * @param {number} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneBaseInterviewsControllerInterview(id: number, positionId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOneBaseInterviewsControllerInterview(id, positionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single Interview
         * @param {number} id 
         * @param {number} positionId 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseInterviewsControllerInterview(id: number, positionId: number, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): AxiosPromise<Interview> {
            return localVarFp.getOneBaseInterviewsControllerInterview(id, positionId, fields, join, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a single Interview
         * @param {number} id 
         * @param {number} positionId 
         * @param {Interview} interview 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseInterviewsControllerInterview(id: number, positionId: number, interview: Interview, options?: any): AxiosPromise<Interview> {
            return localVarFp.updateOneBaseInterviewsControllerInterview(id, positionId, interview, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InterviewApi - object-oriented interface
 * @export
 * @class InterviewApi
 * @extends {BaseAPI}
 */
export class InterviewApi extends BaseAPI {
    /**
     * 
     * @summary Create a single Interview
     * @param {number} positionId 
     * @param {Interview} interview 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterviewApi
     */
    public createOneBaseInterviewsControllerInterview(positionId: number, interview: Interview, options?: AxiosRequestConfig) {
        return InterviewApiFp(this.configuration).createOneBaseInterviewsControllerInterview(positionId, interview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a single Interview
     * @param {number} id 
     * @param {number} positionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterviewApi
     */
    public deleteOneBaseInterviewsControllerInterview(id: number, positionId: number, options?: AxiosRequestConfig) {
        return InterviewApiFp(this.configuration).deleteOneBaseInterviewsControllerInterview(id, positionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single Interview
     * @param {number} id 
     * @param {number} positionId 
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterviewApi
     */
    public getOneBaseInterviewsControllerInterview(id: number, positionId: number, fields?: Array<string>, join?: Array<string>, cache?: number, options?: AxiosRequestConfig) {
        return InterviewApiFp(this.configuration).getOneBaseInterviewsControllerInterview(id, positionId, fields, join, cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a single Interview
     * @param {number} id 
     * @param {number} positionId 
     * @param {Interview} interview 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterviewApi
     */
    public updateOneBaseInterviewsControllerInterview(id: number, positionId: number, interview: Interview, options?: AxiosRequestConfig) {
        return InterviewApiFp(this.configuration).updateOneBaseInterviewsControllerInterview(id, positionId, interview, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PositionApi - axios parameter creator
 * @export
 */
export const PositionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a single Position
         * @param {string} creatorEmail 
         * @param {Position} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneBasePositionControllerPosition: async (creatorEmail: string, position: Position, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creatorEmail' is not null or undefined
            assertParamExists('createOneBasePositionControllerPosition', 'creatorEmail', creatorEmail)
            // verify required parameter 'position' is not null or undefined
            assertParamExists('createOneBasePositionControllerPosition', 'position', position)
            const localVarPath = `/position/{creatorEmail}`
                .replace(`{${"creatorEmail"}}`, encodeURIComponent(String(creatorEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(position, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a single Position
         * @param {number} id 
         * @param {string} creatorEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneBasePositionControllerPosition: async (id: number, creatorEmail: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOneBasePositionControllerPosition', 'id', id)
            // verify required parameter 'creatorEmail' is not null or undefined
            assertParamExists('deleteOneBasePositionControllerPosition', 'creatorEmail', creatorEmail)
            const localVarPath = `/position/{creatorEmail}/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"creatorEmail"}}`, encodeURIComponent(String(creatorEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single Position
         * @param {number} id 
         * @param {string} creatorEmail 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [includeDeleted] Include deleted. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#includeDeleted\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBasePositionControllerPosition: async (id: number, creatorEmail: string, fields?: Array<string>, join?: Array<string>, cache?: number, includeDeleted?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneBasePositionControllerPosition', 'id', id)
            // verify required parameter 'creatorEmail' is not null or undefined
            assertParamExists('getOneBasePositionControllerPosition', 'creatorEmail', creatorEmail)
            const localVarPath = `/position/{creatorEmail}/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"creatorEmail"}}`, encodeURIComponent(String(creatorEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }

            if (includeDeleted !== undefined) {
                localVarQueryParameter['include_deleted'] = includeDeleted;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a single Position
         * @param {number} id 
         * @param {string} creatorEmail 
         * @param {Position} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBasePositionControllerPosition: async (id: number, creatorEmail: string, position: Position, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOneBasePositionControllerPosition', 'id', id)
            // verify required parameter 'creatorEmail' is not null or undefined
            assertParamExists('updateOneBasePositionControllerPosition', 'creatorEmail', creatorEmail)
            // verify required parameter 'position' is not null or undefined
            assertParamExists('updateOneBasePositionControllerPosition', 'position', position)
            const localVarPath = `/position/{creatorEmail}/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"creatorEmail"}}`, encodeURIComponent(String(creatorEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(position, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionApi - functional programming interface
 * @export
 */
export const PositionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a single Position
         * @param {string} creatorEmail 
         * @param {Position} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneBasePositionControllerPosition(creatorEmail: string, position: Position, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Position>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneBasePositionControllerPosition(creatorEmail, position, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a single Position
         * @param {number} id 
         * @param {string} creatorEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneBasePositionControllerPosition(id: number, creatorEmail: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneBasePositionControllerPosition(id, creatorEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a single Position
         * @param {number} id 
         * @param {string} creatorEmail 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [includeDeleted] Include deleted. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#includeDeleted\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneBasePositionControllerPosition(id: number, creatorEmail: string, fields?: Array<string>, join?: Array<string>, cache?: number, includeDeleted?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Position>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBasePositionControllerPosition(id, creatorEmail, fields, join, cache, includeDeleted, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a single Position
         * @param {number} id 
         * @param {string} creatorEmail 
         * @param {Position} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOneBasePositionControllerPosition(id: number, creatorEmail: string, position: Position, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Position>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBasePositionControllerPosition(id, creatorEmail, position, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PositionApi - factory interface
 * @export
 */
export const PositionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a single Position
         * @param {string} creatorEmail 
         * @param {Position} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneBasePositionControllerPosition(creatorEmail: string, position: Position, options?: any): AxiosPromise<Position> {
            return localVarFp.createOneBasePositionControllerPosition(creatorEmail, position, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a single Position
         * @param {number} id 
         * @param {string} creatorEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneBasePositionControllerPosition(id: number, creatorEmail: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOneBasePositionControllerPosition(id, creatorEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single Position
         * @param {number} id 
         * @param {string} creatorEmail 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [includeDeleted] Include deleted. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#includeDeleted\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBasePositionControllerPosition(id: number, creatorEmail: string, fields?: Array<string>, join?: Array<string>, cache?: number, includeDeleted?: number, options?: any): AxiosPromise<Position> {
            return localVarFp.getOneBasePositionControllerPosition(id, creatorEmail, fields, join, cache, includeDeleted, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a single Position
         * @param {number} id 
         * @param {string} creatorEmail 
         * @param {Position} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBasePositionControllerPosition(id: number, creatorEmail: string, position: Position, options?: any): AxiosPromise<Position> {
            return localVarFp.updateOneBasePositionControllerPosition(id, creatorEmail, position, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PositionApi - object-oriented interface
 * @export
 * @class PositionApi
 * @extends {BaseAPI}
 */
export class PositionApi extends BaseAPI {
    /**
     * 
     * @summary Create a single Position
     * @param {string} creatorEmail 
     * @param {Position} position 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public createOneBasePositionControllerPosition(creatorEmail: string, position: Position, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).createOneBasePositionControllerPosition(creatorEmail, position, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a single Position
     * @param {number} id 
     * @param {string} creatorEmail 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public deleteOneBasePositionControllerPosition(id: number, creatorEmail: string, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).deleteOneBasePositionControllerPosition(id, creatorEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single Position
     * @param {number} id 
     * @param {string} creatorEmail 
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [includeDeleted] Include deleted. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#includeDeleted\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public getOneBasePositionControllerPosition(id: number, creatorEmail: string, fields?: Array<string>, join?: Array<string>, cache?: number, includeDeleted?: number, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).getOneBasePositionControllerPosition(id, creatorEmail, fields, join, cache, includeDeleted, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a single Position
     * @param {number} id 
     * @param {string} creatorEmail 
     * @param {Position} position 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public updateOneBasePositionControllerPosition(id: number, creatorEmail: string, position: Position, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).updateOneBasePositionControllerPosition(id, creatorEmail, position, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QuestionApi - axios parameter creator
 * @export
 */
export const QuestionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a single Question
         * @param {number} interviewId 
         * @param {Question} question 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneBaseQuestionControllerQuestion: async (interviewId: number, question: Question, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'interviewId' is not null or undefined
            assertParamExists('createOneBaseQuestionControllerQuestion', 'interviewId', interviewId)
            // verify required parameter 'question' is not null or undefined
            assertParamExists('createOneBaseQuestionControllerQuestion', 'question', question)
            const localVarPath = `/interview/{interviewId}/question`
                .replace(`{${"interviewId"}}`, encodeURIComponent(String(interviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(question, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a single Question
         * @param {number} id 
         * @param {number} interviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneBaseQuestionControllerQuestion: async (id: number, interviewId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOneBaseQuestionControllerQuestion', 'id', id)
            // verify required parameter 'interviewId' is not null or undefined
            assertParamExists('deleteOneBaseQuestionControllerQuestion', 'interviewId', interviewId)
            const localVarPath = `/interview/{interviewId}/question/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"interviewId"}}`, encodeURIComponent(String(interviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single Question
         * @param {number} id 
         * @param {number} interviewId 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseQuestionControllerQuestion: async (id: number, interviewId: number, fields?: Array<string>, join?: Array<string>, cache?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneBaseQuestionControllerQuestion', 'id', id)
            // verify required parameter 'interviewId' is not null or undefined
            assertParamExists('getOneBaseQuestionControllerQuestion', 'interviewId', interviewId)
            const localVarPath = `/interview/{interviewId}/question/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"interviewId"}}`, encodeURIComponent(String(interviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a single Question
         * @param {number} id 
         * @param {number} interviewId 
         * @param {Question} question 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseQuestionControllerQuestion: async (id: number, interviewId: number, question: Question, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOneBaseQuestionControllerQuestion', 'id', id)
            // verify required parameter 'interviewId' is not null or undefined
            assertParamExists('updateOneBaseQuestionControllerQuestion', 'interviewId', interviewId)
            // verify required parameter 'question' is not null or undefined
            assertParamExists('updateOneBaseQuestionControllerQuestion', 'question', question)
            const localVarPath = `/interview/{interviewId}/question/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"interviewId"}}`, encodeURIComponent(String(interviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(question, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionApi - functional programming interface
 * @export
 */
export const QuestionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a single Question
         * @param {number} interviewId 
         * @param {Question} question 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneBaseQuestionControllerQuestion(interviewId: number, question: Question, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneBaseQuestionControllerQuestion(interviewId, question, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a single Question
         * @param {number} id 
         * @param {number} interviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneBaseQuestionControllerQuestion(id: number, interviewId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneBaseQuestionControllerQuestion(id, interviewId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a single Question
         * @param {number} id 
         * @param {number} interviewId 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneBaseQuestionControllerQuestion(id: number, interviewId: number, fields?: Array<string>, join?: Array<string>, cache?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseQuestionControllerQuestion(id, interviewId, fields, join, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a single Question
         * @param {number} id 
         * @param {number} interviewId 
         * @param {Question} question 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOneBaseQuestionControllerQuestion(id: number, interviewId: number, question: Question, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBaseQuestionControllerQuestion(id, interviewId, question, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuestionApi - factory interface
 * @export
 */
export const QuestionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a single Question
         * @param {number} interviewId 
         * @param {Question} question 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneBaseQuestionControllerQuestion(interviewId: number, question: Question, options?: any): AxiosPromise<Question> {
            return localVarFp.createOneBaseQuestionControllerQuestion(interviewId, question, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a single Question
         * @param {number} id 
         * @param {number} interviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneBaseQuestionControllerQuestion(id: number, interviewId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOneBaseQuestionControllerQuestion(id, interviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single Question
         * @param {number} id 
         * @param {number} interviewId 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseQuestionControllerQuestion(id: number, interviewId: number, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): AxiosPromise<Question> {
            return localVarFp.getOneBaseQuestionControllerQuestion(id, interviewId, fields, join, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a single Question
         * @param {number} id 
         * @param {number} interviewId 
         * @param {Question} question 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseQuestionControllerQuestion(id: number, interviewId: number, question: Question, options?: any): AxiosPromise<Question> {
            return localVarFp.updateOneBaseQuestionControllerQuestion(id, interviewId, question, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionApi - object-oriented interface
 * @export
 * @class QuestionApi
 * @extends {BaseAPI}
 */
export class QuestionApi extends BaseAPI {
    /**
     * 
     * @summary Create a single Question
     * @param {number} interviewId 
     * @param {Question} question 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionApi
     */
    public createOneBaseQuestionControllerQuestion(interviewId: number, question: Question, options?: AxiosRequestConfig) {
        return QuestionApiFp(this.configuration).createOneBaseQuestionControllerQuestion(interviewId, question, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a single Question
     * @param {number} id 
     * @param {number} interviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionApi
     */
    public deleteOneBaseQuestionControllerQuestion(id: number, interviewId: number, options?: AxiosRequestConfig) {
        return QuestionApiFp(this.configuration).deleteOneBaseQuestionControllerQuestion(id, interviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single Question
     * @param {number} id 
     * @param {number} interviewId 
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionApi
     */
    public getOneBaseQuestionControllerQuestion(id: number, interviewId: number, fields?: Array<string>, join?: Array<string>, cache?: number, options?: AxiosRequestConfig) {
        return QuestionApiFp(this.configuration).getOneBaseQuestionControllerQuestion(id, interviewId, fields, join, cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a single Question
     * @param {number} id 
     * @param {number} interviewId 
     * @param {Question} question 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionApi
     */
    public updateOneBaseQuestionControllerQuestion(id: number, interviewId: number, question: Question, options?: AxiosRequestConfig) {
        return QuestionApiFp(this.configuration).updateOneBaseQuestionControllerQuestion(id, interviewId, question, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a single User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneBaseUserControllerUser: async (user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('createOneBaseUserControllerUser', 'user', user)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a single User
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneBaseUserControllerUser: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('deleteOneBaseUserControllerUser', 'email', email)
            const localVarPath = `/user/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single User
         * @param {string} email 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseUserControllerUser: async (email: string, fields?: Array<string>, join?: Array<string>, cache?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getOneBaseUserControllerUser', 'email', email)
            const localVarPath = `/user/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a single User
         * @param {string} email 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseUserControllerUser: async (email: string, user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('updateOneBaseUserControllerUser', 'email', email)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('updateOneBaseUserControllerUser', 'user', user)
            const localVarPath = `/user/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {AssignInterviewDTO} assignInterviewDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerAssignInterview: async (email: string, assignInterviewDTO: AssignInterviewDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('userControllerAssignInterview', 'email', email)
            // verify required parameter 'assignInterviewDTO' is not null or undefined
            assertParamExists('userControllerAssignInterview', 'assignInterviewDTO', assignInterviewDTO)
            const localVarPath = `/user/{email}/assign-interview`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignInterviewDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a single User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneBaseUserControllerUser(user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneBaseUserControllerUser(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a single User
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneBaseUserControllerUser(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneBaseUserControllerUser(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a single User
         * @param {string} email 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneBaseUserControllerUser(email: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseUserControllerUser(email, fields, join, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a single User
         * @param {string} email 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOneBaseUserControllerUser(email: string, user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBaseUserControllerUser(email, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} email 
         * @param {AssignInterviewDTO} assignInterviewDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerAssignInterview(email: string, assignInterviewDTO: AssignInterviewDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerAssignInterview(email, assignInterviewDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a single User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneBaseUserControllerUser(user: User, options?: any): AxiosPromise<User> {
            return localVarFp.createOneBaseUserControllerUser(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a single User
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneBaseUserControllerUser(email: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOneBaseUserControllerUser(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single User
         * @param {string} email 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseUserControllerUser(email: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): AxiosPromise<User> {
            return localVarFp.getOneBaseUserControllerUser(email, fields, join, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a single User
         * @param {string} email 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseUserControllerUser(email: string, user: User, options?: any): AxiosPromise<User> {
            return localVarFp.updateOneBaseUserControllerUser(email, user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {AssignInterviewDTO} assignInterviewDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerAssignInterview(email: string, assignInterviewDTO: AssignInterviewDTO, options?: any): AxiosPromise<User> {
            return localVarFp.userControllerAssignInterview(email, assignInterviewDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Create a single User
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createOneBaseUserControllerUser(user: User, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createOneBaseUserControllerUser(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a single User
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteOneBaseUserControllerUser(email: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteOneBaseUserControllerUser(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single User
     * @param {string} email 
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getOneBaseUserControllerUser(email: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getOneBaseUserControllerUser(email, fields, join, cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a single User
     * @param {string} email 
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateOneBaseUserControllerUser(email: string, user: User, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateOneBaseUserControllerUser(email, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {AssignInterviewDTO} assignInterviewDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerAssignInterview(email: string, assignInterviewDTO: AssignInterviewDTO, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerAssignInterview(email, assignInterviewDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


